AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for S3 static website with CloudFront CDN and lifecycle rule

Parameters:
  BucketName:
    Type: String
    Description: Name of the S3 bucket (must be globally unique)
    ConstraintDescription: Bucket name must be unique and lowercase
  LifecycleTransitionDays:
    Type: Number
    Default: 30
    Description: Number of days after which objects transition to Glacier
  DomainName:
    Type: String
    Description: Domain name for the static website (e.g., example.com)
    Default: ''

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      LifecycleConfiguration:
        Rules:
          - Id: GlacierTransitionRule
            Status: Enabled
            Transitions:
              - StorageClass: GLACIER
                Days: !Ref LifecycleTransitionDays
            Filter:
              Prefix: ''

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${S3Bucket}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

  SampleIndexFile:
    Type: AWS::S3::Object
    Properties:
      Bucket: !Ref S3Bucket
      Key: index.html
      ContentType: text/html
      Body: |
        <!DOCTYPE html>
        <html>
        <head>
          <title>Welcome</title>
        </head>
        <body>
          <h1>Welcome to my static website!</h1>
          <p>Hosted on S3 and served via CloudFront.</p>
        </body>
        </html>

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: S3OriginAccessControl
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3Bucket.RegionalDomainName
            Id: S3Origin
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
            S3OriginConfig: {}
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
          DefaultTTL: 86400
          MinTTL: 0
          MaxTTL: 31536000
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /error.html
        HttpVersion: http2
        Aliases: !If
          - HasDomainName
          - [!Ref DomainName]
          - !Ref AWS::NoValue
        Comment: CloudFront distribution for S3 static website

Conditions:
  HasDomainName: !Not [!Equals [!Ref DomainName, '']]

Outputs:
  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref S3Bucket
  S3WebsiteURL:
    Description: URL of the S3 static website
    Value: !GetAtt S3Bucket.WebsiteURL
  CloudFrontDomainName:
    Description: CloudFront distribution domain name
    Value: !GetAtt CloudFrontDistribution.DomainName